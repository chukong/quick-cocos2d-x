
typedef float CGFloat;

class CCPoint
{
    float x;
    float y;
    CCPoint(float x, float y);
    CCPoint(void);
    bool equals(const CCPoint & target) const ;
};
class CCPointArray : public CCObject
{
    static CCPointArray* create(unsigned int capacity);
    void add(CCPoint point);
    void insert(CCPoint &point, unsigned int index);
    void replace(CCPoint &point, unsigned int index);
    CCPoint get(unsigned int index);
    void remove(unsigned int index);
    void removeAll(void);
    unsigned int count(void);
    CCPointArray* reverse(void);
    void reverseInline(void);
};

class CCSize
{
    float width;
    float height;
    CCSize(float width, float height);
    CCSize(void);
    bool equals(const CCSize & target) const;
};

class CCRect
{
    CCPoint origin;
    CCSize  size;
    CCRect(float x, float y, float width, float height);
    CCRect(void);
    float getMinX();
	float getMidX();
	float getMaxX();
	float getMinY();
	float getMidY();
	float getMaxY();
	bool equals(const CCRect & rect) const;
	bool containsPoint(const CCPoint & point) const;
	bool intersectsRect(const CCRect & rect) const;
};

CCPoint CCPointMake(float x, float y);
CCPoint CCPointMake @ ccp (float x, float y);
CCSize  CCSizeMake(float width, float height);
CCRect  CCRectMake(float x, float y, float width,float height);
