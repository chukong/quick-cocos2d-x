/****************************************************************************
Copyright (c) 2010-2012 cocos2d-x.org
Copyright (c) 2008-2010 Ricardo Quesada
Copyright (c) 2011      Zynga Inc.

http://www.cocos2d-x.org

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
****************************************************************************/


#define GL_ZERO                 0
#define GL_ONE                  1
#define GL_SRC_COLOR            0x0300
#define GL_ONE_MINUS_SRC_COLOR  0x0301
#define GL_SRC_ALPHA            0x0302
#define GL_ONE_MINUS_SRC_ALPHA  0x0303
#define GL_DST_ALPHA            0x0304
#define GL_ONE_MINUS_DST_ALPHA  0x0305
#define GL_DST_COLOR            0x0306
#define GL_ONE_MINUS_DST_COLOR  0x0307

typedef unsigned char    GLubyte;
typedef int              GLint;
typedef int              GLsizei;
typedef unsigned char    GLubyte;
typedef unsigned short   GLushort;
typedef unsigned int     GLuint;
typedef float            GLfloat;
typedef short            GLshort;
typedef unsigned int     GLenum;

/** RGB color composed of bytes 3 bytes
@since v0.8
 */
class ccColor3B
{
    ccColor3B();
    ~ccColor3B();
    GLubyte r;
    GLubyte g;
    GLubyte b;
};

//! helper macro that creates an ccColor3B type
ccColor3B ccc3(GLubyte r, GLubyte g, GLubyte b);

/** returns true if both ccColor3B are equal. Otherwise it returns false.
 */
bool ccc3BEqual(ccColor3B col1, ccColor3B col2);

/** RGBA color composed of 4 bytes
@since v0.8
*/
class ccColor4B
{
    ccColor4B();
    ~ccColor4B();
    GLubyte r;
    GLubyte g;
    GLubyte b;
    GLubyte a;
};

//! helper macro that creates an ccColor4B type
ccColor4B ccc4(GLubyte r, GLubyte g, GLubyte b, GLubyte o);

/** RGBA color composed of 4 floats
@since v0.8
*/
class ccColor4F
{
    ccColor4F();
    ~ccColor4F();
    GLfloat r;
    GLfloat g;
    GLfloat b;
    GLfloat a;
};


/** Returns a ccColor4F from a ccColor3B. Alpha will be 1.
 @since v0.99.1
 */
ccColor4F ccc4FFromccc3B(ccColor3B c);

//! helper that creates a ccColor4f type
ccColor4F ccc4f(GLfloat r, GLfloat g, GLfloat b, GLfloat a);

/** Returns a ccColor4F from a ccColor4B.
 @since v0.99.1
 */
ccColor4F ccc4FFromccc4B(ccColor4B c);

ccColor4B ccc4BFromccc4F(ccColor4F c);

/** returns YES if both ccColor4F are equal. Otherwise it returns NO.
 @since v0.99.1
 */
bool ccc4FEqual(ccColor4F a, ccColor4F b);

//! Blend Function used for textures
class ccBlendFunc
{
    ccBlendFunc();
    ~ccBlendFunc();
    //! source blend function
    GLenum src;
    //! destination blend function
    GLenum dst;
};

// XXX: If any of these enums are edited and/or reordered, update CCTexture2D.m
//! Vertical text alignment type
typedef enum
{
    kCCVerticalTextAlignmentTop,
    kCCVerticalTextAlignmentCenter,
    kCCVerticalTextAlignmentBottom,
} CCVerticalTextAlignment;

// XXX: If any of these enums are edited and/or reordered, update CCTexture2D.m
//! Horizontal text alignment type
typedef enum
{
    kCCTextAlignmentLeft,
    kCCTextAlignmentCenter,
    kCCTextAlignmentRight,
} CCTextAlignment;

typedef struct
{
    ccFontDefinition();

    // font name
    std::string             m_fontName;
    // font size
    int                     m_fontSize;
    // horizontal alignment
    CCTextAlignment         m_alignment;
    // vertical alignment
    CCVerticalTextAlignment m_vertAlignment;
    // renering box
    CCSize                  m_dimensions;
    // font color
    ccColor3B               m_fontFillColor;
    // font shadow
    ccFontShadow            m_shadow;
    // font stroke
    ccFontStroke            m_stroke;

} ccFontDefinition;

