/****************************************************************************
Copyright (c) 2010-2012 cocos2d-x.org
Copyright (c) 2008-2009 Jason Booth

http://www.cocos2d-x.org

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
****************************************************************************/

/**
 * @addtogroup actions
 * @{
 */

/**
 @brief Base class for Easing actions
 @ingroup Actions
 */
class CCActionEase : public CCActionInterval
{
    /** creates the action */
    static CCActionEase* create(CCActionInterval *pAction);
};

/**
 @brief Base class for Easing actions with rate parameters
 @ingroup Actions
 */
class CCEaseRateAction : public CCActionEase
{
    /** Creates the action with the inner action and the rate parameter */
    static CCEaseRateAction* create(CCActionInterval* pAction, float fRate);
};

/**
 @brief CCEaseIn action with a rate
 @ingroup Actions
 */
class CCEaseIn : public CCEaseRateAction
{
    /** Creates the action with the inner action and the rate parameter */
    static CCEaseIn* create(CCActionInterval* pAction, float fRate);
};

/**
 @brief CCEaseOut action with a rate
 @ingroup Actions
 */
class CCEaseOut : public CCEaseRateAction
{
    /** Creates the action with the inner action and the rate parameter */
    static CCEaseOut* create(CCActionInterval* pAction, float fRate);
};

/**
 @brief CCEaseInOut action with a rate
 @ingroup Actions
 */
class CCEaseInOut : public CCEaseRateAction
{
    /** Creates the action with the inner action and the rate parameter */
    static CCEaseInOut* create(CCActionInterval* pAction, float fRate);
};

/**
 @brief CCEase Exponential In
 @ingroup Actions
 */
class CCEaseExponentialIn : public CCActionEase
{
    /** creates the action */
    static CCEaseExponentialIn* create(CCActionInterval* pAction);
};

/**
 @brief Ease Exponential Out
 @ingroup Actions
 */
class CCEaseExponentialOut : public CCActionEase
{
    /** creates the action */
    static CCEaseExponentialOut* create(CCActionInterval* pAction);
};

/**
 @brief Ease Exponential InOut
 @ingroup Actions
 */
class CCEaseExponentialInOut : public CCActionEase
{
    /** creates the action */
    static CCEaseExponentialInOut* create(CCActionInterval* pAction);
};

/**
 @brief Ease Sine In
 @ingroup Actions
 */
class CCEaseSineIn : public CCActionEase
{
    /** creates the action */
    static CCEaseSineIn* create(CCActionInterval* pAction);
};

/**
 @brief Ease Sine Out
 @ingroup Actions
 */
class CCEaseSineOut : public CCActionEase
{
    /** creates the action */
    static CCEaseSineOut* create(CCActionInterval* pAction);
};

/**
 @brief Ease Sine InOut
 @ingroup Actions
 */
class CCEaseSineInOut : public CCActionEase
{
    /** creates the action */
    static CCEaseSineInOut* create(CCActionInterval* pAction);
};

/**
 @brief Ease Elastic abstract class
 @since v0.8.2
 @ingroup Actions
 */
class CCEaseElastic : public CCActionEase
{
    /** Creates the action with the inner action and the period in radians (default is 0.3) */
    static CCEaseElastic* create(CCActionInterval *pAction, float fPeriod);
    static CCEaseElastic* create(CCActionInterval *pAction);
};

/**
 @brief Ease Elastic In action.
 @warning This action doesn't use a bijective function. Actions like Sequence might have an unexpected result when used with this action.
 @since v0.8.2
 @ingroup Actions
 */
class CCEaseElasticIn : public CCEaseElastic
{
    /** Creates the action with the inner action and the period in radians (default is 0.3) */
    static CCEaseElasticIn* create(CCActionInterval *pAction, float fPeriod);
    static CCEaseElasticIn* create(CCActionInterval *pAction);
};

/**
 @brief Ease Elastic Out action.
 @warning This action doesn't use a bijective function. Actions like Sequence might have an unexpected result when used with this action.
 @since v0.8.2
 @ingroup Actions
 */
class CCEaseElasticOut : public CCEaseElastic
{
    /** Creates the action with the inner action and the period in radians (default is 0.3) */
    static CCEaseElasticOut* create(CCActionInterval *pAction, float fPeriod);
    static CCEaseElasticOut* create(CCActionInterval *pAction);
};

/**
 @brief Ease Elastic InOut action.
 @warning This action doesn't use a bijective function. Actions like Sequence might have an unexpected result when used with this action.
 @since v0.8.2
 @ingroup Actions
 */
class CCEaseElasticInOut : public CCEaseElastic
{
    /** Creates the action with the inner action and the period in radians (default is 0.3) */
    static CCEaseElasticInOut* create(CCActionInterval *pAction, float fPeriod);
    static CCEaseElasticInOut* create(CCActionInterval *pAction);
};

/**
 @brief CCEaseBounce abstract class.
 @since v0.8.2
 @ingroup Actions
*/
class CCEaseBounce : public CCActionEase
{
    /** creates the action */
    static CCEaseBounce* create(CCActionInterval* pAction);
};

/**
 @brief CCEaseBounceIn action.
 @warning This action doesn't use a bijective function. Actions like Sequence might have an unexpected result when used with this action.
 @since v0.8.2
 @ingroup Actions
*/
class CCEaseBounceIn : public CCEaseBounce
{
    /** creates the action */
    static CCEaseBounceIn* create(CCActionInterval* pAction);
};

/**
 @brief EaseBounceOut action.
 @warning This action doesn't use a bijective function. Actions like Sequence might have an unexpected result when used with this action.
 @since v0.8.2
 @ingroup Actions
 */
class CCEaseBounceOut : public CCEaseBounce
{
    /** creates the action */
    static CCEaseBounceOut* create(CCActionInterval* pAction);
};

/**
 @brief CCEaseBounceInOut action.
 @warning This action doesn't use a bijective function. Actions like Sequence might have an unexpected result when used with this action.
 @since v0.8.2
 @ingroup Actions
 */
class CCEaseBounceInOut : public CCEaseBounce
{
    /** creates the action */
    static CCEaseBounceInOut* create(CCActionInterval* pAction);
};

/**
 @brief CCEaseBackIn action.
 @warning This action doesn't use a bijective function. Actions like Sequence might have an unexpected result when used with this action.
 @since v0.8.2
 @ingroup Actions
 */
class CCEaseBackIn : public CCActionEase
{
    /** creates the action */
    static CCEaseBackIn* create(CCActionInterval* pAction);
};

/**
 @brief CCEaseBackOut action.
 @warning This action doesn't use a bijective function. Actions like Sequence might have an unexpected result when used with this action.
 @since v0.8.2
 @ingroup Actions
 */
class CCEaseBackOut : public CCActionEase
{
    /** creates the action */
    static CCEaseBackOut* create(CCActionInterval* pAction);
};

/**
 @brief CCEaseBackInOut action.
 @warning This action doesn't use a bijective function. Actions like Sequence might have an unexpected result when used with this action.
 @since v0.8.2
 @ingroup Actions
 */
class CCEaseBackInOut : public CCActionEase
{
    /** creates the action */
    static CCEaseBackInOut* create(CCActionInterval* pAction);
};

// end of actions group
/// @}
