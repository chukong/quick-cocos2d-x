/****************************************************************************
Copyright (c) 2010-2012 cocos2d-x.org
Copyright (c) 2008-2011 Ricardo Quesada
Copyright (c) 2011 Zynga Inc.

http://www.cocos2d-x.org

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
****************************************************************************/

/**
 * @addtogroup actions
 * @{
 */

/**
@brief An interval action is an action that takes place within a certain period of time.
It has an start time, and a finish time. The finish time is the parameter
duration plus the start time.

These CCActionInterval actions have some interesting properties, like:
- They can run normally (default)
- They can run reversed with the reverse method
- They can run with the time altered with the Accelerate, AccelDeccel and Speed actions.

For example, you can simulate a Ping Pong effect running the action normally and
then running it again in Reverse mode.

Example:

CCAction *pingPongAction = CCSequence::actions(action, action->reverse(), NULL);
*/
class CCActionInterval : public CCFiniteTimeAction
{
    CCActionInterval *copy(void);
};

/** @brief Runs actions sequentially, one after another
 */
class CCSequence : public CCActionInterval
{
    /** helper constructor to create an array of sequenceable actions given an array */
    static CCSequence* create(CCArray *arrayOfActions);
    /** creates the action */
    static CCSequence* createWithTwoActions(CCFiniteTimeAction *pActionOne, CCFiniteTimeAction *pActionTwo);
};

/** @brief Repeats an action a number of times.
 * To repeat an action forever use the CCRepeatForever action.
 */
class CCRepeat : public CCActionInterval
{
    /** creates a CCRepeat action. Times is an unsigned integer between 1 and pow(2,30) */
    static CCRepeat* create(CCFiniteTimeAction *pAction, unsigned int times);
};

/** @brief Repeats an action for ever.
To repeat the an action for a limited number of times use the Repeat action.
@warning This action can't be Sequenceable because it is not an IntervalAction
*/
class CCRepeatForever : public CCActionInterval
{
    /** creates the action */
    static CCRepeatForever* create(CCActionInterval *pAction);
};

/** @brief Spawn a new action immediately
 */
class CCSpawn : public CCActionInterval
{
    /** helper constructor to create an array of spawned actions given an array */
    static CCSpawn* create(CCArray *arrayOfActions);
    /** creates the Spawn action */
    static CCSpawn* createWithTwoActions(CCFiniteTimeAction *pAction1, CCFiniteTimeAction *pAction2);
};

/** @brief Rotates a CCNode object to a certain angle by modifying it's
 rotation attribute.
 The direction will be decided by the shortest angle.
*/
class CCRotateTo : public CCActionInterval
{
    /** creates the action with separate rotation angles */
    static CCRotateTo* create(float fDuration, float fDeltaAngleX, float fDeltaAngleY);
    /** creates the action */
    static CCRotateTo* create(float fDuration, float fDeltaAngle);
};

/** @brief Rotates a CCNode object clockwise a number of degrees by modifying it's rotation attribute.
*/
class CCRotateBy : public CCActionInterval
{
    /** creates the action */
    static CCRotateBy* create(float fDuration, float fDeltaAngleX, float fDeltaAngleY);
    static CCRotateBy* create(float fDuration, float fDeltaAngle);
};

/**  Moves a CCNode object x,y pixels by modifying it's position attribute.
 x and y are relative to the position of the object.
 Several CCMoveBy actions can be concurrently called, and the resulting
 movement will be the sum of individual movements.
 @since v2.1beta2-custom
 */
class CCMoveBy : public CCActionInterval
{
    /** creates the action */
    static CCMoveBy* create(float duration, CCPoint deltaPosition);
};

/** Moves a CCNode object to the position x,y. x and y are absolute coordinates by modifying it's position attribute.
 Several CCMoveTo actions can be concurrently called, and the resulting
 movement will be the sum of individual movements.
 @since v2.1beta2-custom
 */
class CCMoveTo : public CCMoveBy
{
    /** creates the action */
    static CCMoveTo* create(float duration, CCPoint position);
};

/** Skews a CCNode object to given angles by modifying it's skewX and skewY attributes
@since v1.0
*/
class CCSkewTo : public CCActionInterval
{
    /** creates the action */
    static CCSkewTo* create(float t, float sx, float sy);
};

/** Skews a CCNode object by skewX and skewY degrees
@since v1.0
*/
class CCSkewBy : public CCSkewTo
{
    /** creates the action */
    static CCSkewBy* create(float t, float deltaSkewX, float deltaSkewY);
};

/** @brief Moves a CCNode object simulating a parabolic jump movement by modifying it's position attribute.
*/
class CCJumpBy : public CCActionInterval
{
    /** creates the action */
    static CCJumpBy* create(float duration, CCPoint position, float height, unsigned int jumps);
};

/** @brief Moves a CCNode object to a parabolic position simulating a jump movement by modifying it's position attribute.
*/
class CCJumpTo : public CCJumpBy
{
    /** creates the action */
    static CCJumpTo* create(float duration, CCPoint position, float height, int jumps);
};

/** @typedef bezier configuration structure
 */
class ccBezierConfig
{
    ccBezierConfig();
    ~ccBezierConfig();
    //! end position of the bezier
    CCPoint endPosition;
    //! Bezier control point 1
    CCPoint controlPoint_1;
    //! Bezier control point 2
    CCPoint controlPoint_2;
};

/** @brief An action that moves the target with a cubic Bezier curve by a certain distance.
 */
class CCBezierBy : public CCActionInterval
{
    /** creates the action with a duration and a bezier configuration */
    static CCBezierBy* create(float t, ccBezierConfig c);
};

/** @brief An action that moves the target with a cubic Bezier curve to a destination point.
 @since v0.8.2
 */
class CCBezierTo : public CCBezierBy
{
    /** creates the action with a duration and a bezier configuration */
    static CCBezierTo* create(float t, ccBezierConfig c);
};

/** @brief Scales a CCNode object to a zoom factor by modifying it's scale attribute.
 @warning This action doesn't support "reverse"
 */
class CCScaleTo : public CCActionInterval
{
    /** creates the action with and X factor and a Y factor */
    static CCScaleTo* create(float duration, float sx, float sy);
    /** creates the action with the same scale factor for X and Y */
    static CCScaleTo* create(float duration, float s);
};

/** @brief Scales a CCNode object a zoom factor by modifying it's scale attribute.
*/
class CCScaleBy : public CCScaleTo
{
    /** creates the action with and X factor and a Y factor */
    static CCScaleBy* create(float duration, float sx, float sy);
    /** creates the action with the same scale factor for X and Y */
    static CCScaleBy* create(float duration, float s);
};

/** @brief Blinks a CCNode object by modifying it's visible attribute
*/
class CCBlink : public CCActionInterval
{
    /** creates the action */
    static CCBlink* create(float duration, unsigned int uBlinks);
};

/** @brief Fades In an object that implements the CCRGBAProtocol protocol. It modifies the opacity from 0 to 255.
 The "reverse" of this action is FadeOut
 */
class CCFadeIn : public CCActionInterval
{
    /** creates the action */
    static CCFadeIn* create(float d);
};

/** @brief Fades Out an object that implements the CCRGBAProtocol protocol. It modifies the opacity from 255 to 0.
 The "reverse" of this action is FadeIn
*/
class CCFadeOut : public CCActionInterval
{
    /** creates the action */
    static CCFadeOut* create(float d);
};

/** @brief Fades an object that implements the CCRGBAProtocol protocol. It modifies the opacity from the current value to a custom one.
 @warning This action doesn't support "reverse"
 */
class CCFadeTo : public CCActionInterval
{
    /** creates an action with duration and opacity */
    static CCFadeTo* create(float duration, GLubyte opacity);
};

/** @brief Tints a CCNode that implements the CCNodeRGB protocol from current tint to a custom one.
 @warning This action doesn't support "reverse"
 @since v0.7.2
*/
class CCTintTo : public CCActionInterval
{
    /** creates an action with duration and color */
    static CCTintTo* create(float duration, GLubyte red, GLubyte green, GLubyte blue);
};

/** @brief Tints a CCNode that implements the CCNodeRGB protocol from current tint to a custom one.
 @since v0.7.2
 */
class CCTintBy : public CCActionInterval
{
    /** creates an action with duration and color */
    static CCTintBy* create(float duration, GLshort deltaRed, GLshort deltaGreen, GLshort deltaBlue);
};

/** @brief Delays the action a certain amount of seconds
*/
class CCDelayTime : public CCActionInterval
{
    /** creates the action */
    static CCDelayTime* create(float d);
};

/** @brief Executes an action in reverse order, from time=duration to time=0

 @warning Use this action carefully. This action is not
 sequenceable. Use it as the default "reversed" method
 of your own actions, but using it outside the "reversed"
 scope is not recommended.
*/
class CCReverseTime : public CCActionInterval
{
    /** creates the action */
    static CCReverseTime* create(CCFiniteTimeAction *pAction);
};

/** @brief Animates a sprite given the name of an Animation */
class CCAnimate : public CCActionInterval
{
    /** creates the action with an Animation and will restore the original frame when the animation is over */
    static CCAnimate* create(CCAnimation *pAnimation);
};

/** Overrides the target of an action so that it always runs on the target
 * specified at action creation rather than the one specified by runAction.
 */
class CCTargetedAction : public CCActionInterval
{
    /** Create an action with the specified action and forced target */
    static CCTargetedAction* create(CCNode* pTarget, CCFiniteTimeAction* pAction);
};

// end of actions group
/// @}
