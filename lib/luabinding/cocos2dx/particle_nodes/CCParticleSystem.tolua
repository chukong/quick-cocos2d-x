/****************************************************************************
Copyright (c) 2010-2012 cocos2d-x.org
Copyright (c) 2008-2010 Ricardo Quesada
Copyright (c) 2011      Zynga Inc.

http://www.cocos2d-x.org

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
****************************************************************************/

/**
 * @addtogroup particle_nodes
 * @{
 */

//* @enum
enum {
    /** The Particle emitter lives forever */
    kCCParticleDurationInfinity = -1,

    /** The starting size of the particle is equal to the ending size */
    kCCParticleStartSizeEqualToEndSize = -1,

    /** The starting radius of the particle is equal to the ending radius */
    kCCParticleStartRadiusEqualToEndRadius = -1,

    // backward compatible
    kParticleStartSizeEqualToEndSize = kCCParticleStartSizeEqualToEndSize,
    kParticleDurationInfinity = kCCParticleDurationInfinity,
};

//* @enum
enum {
    /** Gravity mode (A mode) */
    kCCParticleModeGravity,

    /** Radius mode (B mode) */
    kCCParticleModeRadius,
};

/** @typedef tCCPositionType
possible types of particle positions
*/
typedef enum {
    /** Living particles are attached to the world and are unaffected by emitter repositioning. */
    kCCPositionTypeFree,

    /** Living particles are attached to the world but will follow the emitter repositioning.
    Use case: Attach an emitter to an sprite, and you want that the emitter follows the sprite.
    */
    kCCPositionTypeRelative,

    /** Living particles are attached to the emitter and are translated along with it. */
    kCCPositionTypeGrouped,
}tCCPositionType;


/** @brief Particle System base class.
Attributes of a Particle System:
- emission rate of the particles
- Gravity Mode (Mode A):
- gravity
- direction
- speed +-  variance
- tangential acceleration +- variance
- radial acceleration +- variance
- Radius Mode (Mode B):
- startRadius +- variance
- endRadius +- variance
- rotate +- variance
- Properties common to all modes:
- life +- life variance
- start spin +- variance
- end spin +- variance
- start size +- variance
- end size +- variance
- start color +- variance
- end color +- variance
- life +- variance
- blending function
- texture

cocos2d also supports particles generated by Particle Designer (http://particledesigner.71squared.com/).
'Radius Mode' in Particle Designer uses a fixed emit rate of 30 hz. Since that can't be guaranteed in cocos2d,
cocos2d uses a another approach, but the results are almost identical.

cocos2d supports all the variables used by Particle Designer plus a bit more:
- spinning particles (supported when using CCParticleSystemQuad)
- tangential acceleration (Gravity mode)
- radial acceleration (Gravity mode)
- radius direction (Radius mode) (Particle Designer supports outwards to inwards direction only)

It is possible to customize any of the above mentioned properties in runtime. Example:

@code
emitter.radialAccel = 15;
emitter.startSpin = 0;
@endcode

*/
class CCParticleSystem : public CCNode
{
    /** weak reference to the CCSpriteBatchNode that renders the CCSprite */
    CCParticleBatchNode* getBatchNode();

    // index of system in batch node array
    unsigned int getAtlasIndex();

    /** Quantity of particles that are being simulated at the moment */
    unsigned int getParticleCount();
    /** How many seconds the emitter will run. -1 means 'forever' */
    float getDuration();
    void setDuration(float v);

    /** sourcePosition of the emitter */
    CCPoint getSourcePosition();
    void setSourcePosition(CCPoint p);

    /** Position variance of the emitter */
    CCPoint getPosVar();
    void setPosVar(CCPoint p);

    /** life, and life variation of each particle */
    float getLife();
    void setLife(float v);

    /** life variance of each particle */
    float getLifeVar();
    void setLifeVar(float v);

    /** angle and angle variation of each particle */
    float getAngle();
    void setAngle(float v);

    /** angle variance of each particle */
    float getAngleVar();
    void setAngleVar(float v);

    // mode A
    CCPoint getGravity();
    void setGravity(CCPoint g);
    float getSpeed();
    void setSpeed(float speed);
    float getSpeedVar();
    void setSpeedVar(float speed);
    float getTangentialAccel();
    void setTangentialAccel(float t);
    float getTangentialAccelVar();
    void setTangentialAccelVar(float t);
    float getRadialAccel();
    void setRadialAccel(float t);
    float getRadialAccelVar();
    void setRadialAccelVar(float t);
    bool getRotationIsDir();
    void setRotationIsDir(bool t);

    // mode B
    float getStartRadius();
    void setStartRadius(float startRadius);
    float getStartRadiusVar();
    void setStartRadiusVar(float startRadiusVar);
    float getEndRadius();
    void setEndRadius(float endRadius);
    float getEndRadiusVar();
    void setEndRadiusVar(float endRadiusVar);
    float getRotatePerSecond();
    void setRotatePerSecond(float degrees);
    float getRotatePerSecondVar();
    void setRotatePerSecondVar(float degrees);

    bool isActive();
    bool isBlendAdditive();
    void setBlendAdditive(bool value);

//////////////////////////////////////////////////////////////////////////

    /** start size in pixels of each particle */
    float getStartSize();
    void setStartSize(float v);

    /** size variance in pixels of each particle */
    float getStartSizeVar();
    void setStartSizeVar(float v);

    /** end size in pixels of each particle */
    float getEndSize();
    void setEndSize(float v);

    /** end size variance in pixels of each particle */
    float getEndSizeVar();
    void setEndSizeVar(float v);

    /** start color of each particle */
    ccColor4F getStartColor();
    void setStartColor(ccColor4F color);

    /** start color variance of each particle */
    ccColor4F getStartColorVar();
    void setStartColorVar(ccColor4F color);

    /** end color and end color variation of each particle */
    ccColor4F getEndColor();
    void setEndColor(ccColor4F color);

    /** end color variance of each particle */
    ccColor4F getEndColorVar();
    void setEndColorVar(ccColor4F color);

    //* initial angle of each particle
    float getStartSpin();
    void setStartSpin(float v);

    //* initial angle of each particle
    float getStartSpinVar();
    void setStartSpinVar(float v);

    //* initial angle of each particle
    float getEndSpin();
    void setEndSpin(float v);

    //* initial angle of each particle
    float getEndSpinVar();
    void setEndSpinVar(float v);

    /** emission rate of the particles */
    float getEmissionRate();
    void setEmissionRate(float v);

    /** maximum particles of the system */
    unsigned int getTotalParticles();
    void setTotalParticles(unsigned int n);

    /** conforms to CocosNodeTexture protocol */
    CCTexture2D* getTexture();
    void setTexture(CCTexture2D* tex);

    /** conforms to CocosNodeTexture protocol */
    ccBlendFunc getBlendFunc();
    void setBlendFunc(ccBlendFunc blend);

    /** does the alpha value modify color */
    bool getOpacityModifyRGB();
    void setOpacityModifyRGB(bool v);

    /** particles movement type: Free or Grouped
    @since v0.8
    */
    tCCPositionType getPositionType();
    void setPositionType(tCCPositionType t);

    /** whether or not the node will be auto-removed when it has no particles left.
    By default it is false.
    @since v0.8
    */
    bool isAutoRemoveOnFinish();
    void setAutoRemoveOnFinish(bool var);

    /** Switch between different kind of emitter modes:
    - kCCParticleModeGravity: uses gravity, speed, radial and tangential acceleration
    - kCCParticleModeRadius: uses radius movement + rotation
    */
    int getEmitterMode();
    void setEmitterMode(int m);

    /** initializes a CCParticleSystem*/
    bool init();
    /** initializes a CCParticleSystem from a plist file.
    This plist files can be created manually or with Particle Designer:
    http://particledesigner.71squared.com/
    @since v0.99.3
    */
    bool initWithFile(const char *plistFile);

    /** initializes a CCQuadParticleSystem from a CCDictionary.
    @since v0.99.3
    */
    bool initWithDictionary(CCDictionary *dictionary);

    /** initializes a particle system from a NSDictionary and the path from where to load the png
     @since v2.1
     */
    bool initWithDictionary(CCDictionary *dictionary, const char *dirname);

    //! Initializes a system with a fixed number of particles
    bool initWithTotalParticles(unsigned int numberOfParticles);
    //! Add a particle to the emitter
    bool addParticle();
    //! stop emitting particles. Running particles will continue to run until they die
    void stopSystem();
    //! Kill all living particles.
    void resetSystem();
    //! whether or not the system is full
    bool isFull();

    void updateWithNoTime(void);
};

// end of particle_nodes group
/// @}
