/****************************************************************************
Copyright (c) 2010-2012 cocos2d-x.org
Copyright (c) 2008-2011 Ricardo Quesada
Copyright (c) 2011      Zynga Inc.

http://www.cocos2d-x.org

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
****************************************************************************/

/**
 * @addtogroup GUI
 * @{
 * @addtogroup menu
 * @{
 */

/** @brief CCMenuItem base class
 *
 *  Subclass CCMenuItem (or any subclass) to create your custom CCMenuItem objects.
 */
class CCMenuItem : public CCNode
{
    /** Creates a CCMenuItem with no target/selector */
    static CCMenuItem* create();

    /** Returns the outside box */
    CCRect rect();

    /** Activate the item */
    void activate();
    /** The item was selected (not activated), similar to "mouse-over" */
    void selected();
    /** The item was unselected */
    void unselected();

    bool isEnabled();
    void setEnabled(bool value);
    bool isSelected();
};

/** @brief An abstract class for "label" CCMenuItemLabel items
 Any CCNode that supports the CCLabelProtocol protocol can be added.
 Supported nodes:
 - CCBitmapFontAtlas
 - CCLabelAtlas
 - CCLabelTTF
 */
class CCMenuItemLabel : public CCMenuItem
{
    /** creates a CCMenuItemLabel with a Label, target and selector */
    static CCMenuItemLabel * create(CCNode*label, CCObject* target, SEL_MenuHandler selector);
    /** creates a CCMenuItemLabel with a Label. Target and selector will be nil */
    static CCMenuItemLabel* create(CCNode *label);

    /** the color that will be used to disable the item */
    ccColor3B getDisabledColor();
    void setDisabledColor(ccColor3B color);

    /** Label that is rendered. It can be any CCNode that implements the CCLabelProtocol */
    CCNode* getLabel();
    void setLabel(CCNode* label);

    /** sets a new string to the inner label */
    void setString(const char * label);
};

/** @brief A CCMenuItemAtlasFont
 Helper class that creates a MenuItemLabel class with a LabelAtlas
 */
class CCMenuItemAtlasFont : public CCMenuItemLabel
{
    /** creates a menu item from a string and atlas with a target/selector */
    static CCMenuItemAtlasFont* create(const char *value, const char *charMapFile, int itemWidth, int itemHeight, char startCharMap);
};


/** @brief A CCMenuItemFont
 Helper class that creates a CCMenuItemLabel class with a Label
 */
class CCMenuItemFont : public CCMenuItemLabel
{
    /** set default font size */
    static void setFontSize(unsigned int s);
    /** get default font size */
    static unsigned int fontSize();
    /** set the default font name */
    static void setFontName(const char *name);
    /** get the default font name */
    static const char *fontName();

    /** creates a menu item from a string without target/selector. To be used with CCMenuItemToggle */
    static CCMenuItemFont * create(const char *value);

    /** set font size
     * c++ can not overload static and non-static member functions with the same parameter types
     * so change the name to setFontSizeObj
     */
    void setFontSizeObj(unsigned int s);

    /** get font size */
    unsigned int fontSizeObj();

    /** set the font name
     * c++ can not overload static and non-static member functions with the same parameter types
     * so change the name to setFontNameObj
     */
    void setFontNameObj(const char* name);

    const char* fontNameObj();
};


/** @brief CCMenuItemSprite accepts CCNode<CCRGBAProtocol> objects as items.
 The images has 3 different states:
 - unselected image
 - selected image
 - disabled image

 @since v0.8.0
 */
class CCMenuItemSprite : public CCMenuItem
{
    /** the image used when the item is not selected */
    CCNode* getNormalImage();
    void setNormalImage(CCNode* node);

    /** the image used when the item is selected */
    CCNode* getSelectedImage();
    void setSelectedImage(CCNode* node);

    /** the image used when the item is disabled */
    CCNode* getDisabledImage();
    void setDisabledImage(CCNode* node);

    /** creates a menu item with a normal, selected and disabled image*/
    static CCMenuItemSprite * create(CCNode* normalSprite, CCNode* selectedSprite, CCNode* disabledSprite = NULL);
};


/** @brief CCMenuItemImage accepts images as items.
 The images has 3 different states:
 - unselected image
 - selected image
 - disabled image

 For best results try that all images are of the same size
 */
class CCMenuItemImage : public CCMenuItemSprite
{
    /** creates a menu item with a normal,selected  and disabled image*/
    static CCMenuItemImage* create(const char *normalImage, const char *selectedImage, const char *disabledImage);
    /** creates a menu item with a normal and selected image*/
    static CCMenuItemImage* create(const char *normalImage, const char *selectedImage);
    /** Creates an CCMenuItemImage.
     */
    static CCMenuItemImage* create();

    /** sets the sprite frame for the normal image */
    void setNormalSpriteFrame(CCSpriteFrame* frame);
    /** sets the sprite frame for the selected image */
    void setSelectedSpriteFrame(CCSpriteFrame* frame);
    /** sets the sprite frame for the disabled image */
    void setDisabledSpriteFrame(CCSpriteFrame* frame);
};


/** @brief A CCMenuItemToggle
 A simple container class that "toggles" it's inner items
 The inner items can be any MenuItem
 */
class CCMenuItemToggle : public CCMenuItem
{
    /** creates a menu item with a item */
    static CCMenuItemToggle* create(CCMenuItem *item);

    /** creates a menu item with no target/selector and no items */
    static CCMenuItemToggle* create();

    /** returns the selected item */
    unsigned int getSelectedIndex();
    void setSelectedIndex(unsigned int index);

    /** CCMutableArray that contains the subitems. You can add/remove items in runtime, and you can replace the array with a new one.
     @since v0.7.2
     */
    CCArray* getSubItems();

    /** add more menu item */
    void addSubItem(CCMenuItem *item);

    /** return the selected item */
    CCMenuItem* selectedItem();
};

// end of GUI group
/// @}
/// @}
