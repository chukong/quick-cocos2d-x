/****************************************************************************
Copyright (c) 2010-2012 cocos2d-x.org
Copyright (c) 2008-2010 Ricardo Quesada
Copyright (c) 2011      Zynga Inc.

http://www.cocos2d-x.org

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

Use any of these editors to generate BMFonts:
  http://glyphdesigner.71squared.com/ (Commercial, Mac OS X)
  http://www.n4te.com/hiero/hiero.jnlp (Free, Java)
  http://slick.cokeandcode.com/demos/hiero.jnlp (Free, Java)
  http://www.angelcode.com/products/bmfont/ (Free, Windows only)

****************************************************************************/

/**
 * @addtogroup GUI
 * @{
 * @addtogroup label
 * @{
 */

/** @brief CCLabelBMFont is a subclass of CCSpriteBatchNode.

Features:
- Treats each character like a CCSprite. This means that each individual character can be:
- rotated
- scaled
- translated
- tinted
- change the opacity
- It can be used as part of a menu item.
- anchorPoint can be used to align the "label"
- Supports AngelCode text format

Limitations:
- All inner characters are using an anchorPoint of (0.5f, 0.5f) and it is not recommend to change it
because it might affect the rendering

CCLabelBMFont implements the protocol CCLabelProtocol, like CCLabel and CCLabelAtlas.
CCLabelBMFont has the flexibility of CCLabel, the speed of CCLabelAtlas and all the features of CCSprite.
If in doubt, use CCLabelBMFont instead of CCLabelAtlas / CCLabel.

Supported editors:
http://glyphdesigner.71squared.com/ (Commercial, Mac OS X)
http://www.n4te.com/hiero/hiero.jnlp (Free, Java)
http://slick.cokeandcode.com/demos/hiero.jnlp (Free, Java)
http://www.angelcode.com/products/bmfont/ (Free, Windows only)

@since v0.8
*/

enum {
    kCCLabelAutomaticWidth = -1,
};

class CCLabelBMFont : public CCSpriteBatchNode
{
    CCLabelBMFont();
    ~CCLabelBMFont();

    bool init();
    /** init a bitmap font atlas with an initial string and the FNT file */
    bool initWithString(const char *str, const char *fntFile, float width = kCCLabelAutomaticWidth, CCTextAlignment alignment = kCCTextAlignmentLeft, CCPoint imageOffset = ccp(0, 0));

    /** Purges the cached data.
    Removes from memory the cached configurations and the atlas name dictionary.
    @since v0.99.3
    */
    static void purgeCachedData();

    /** creates a bitmap font atlas with an initial string and the FNT file */
    static CCLabelBMFont * create(const char *text, const char *fntFile, float width, CCTextAlignment alignment, CCPoint imageOffset);
    static CCLabelBMFont * create(const char *text, const char *fntFile, float width, CCTextAlignment alignment);
    static CCLabelBMFont * create(const char *text, const char *fntFile, float width);
    static CCLabelBMFont * create(const char *text, const char *fntFile);
    /** Creates an label.
     */
    static CCLabelBMFont * create();

    // super method
    void setString(const char *newString, bool needUpdateLabel);
    void setString(const char *newString);
    const char* getString(void);
    void setCString(const char *label);
    void updateLabel();

    void setAlignment(CCTextAlignment alignment);
    void setWidth(float width);
    void setLineBreakWithoutSpace(bool breakWithoutSpace);

    // CCRGBAProtocol
    bool isOpacityModifyRGB();
    void setOpacityModifyRGB(bool isOpacityModifyRGB); GLubyte getOpacity();
    GLubyte getDisplayedOpacity();
    void setOpacity(GLubyte opacity);
    void updateDisplayedOpacity(GLubyte parentOpacity);
    bool isCascadeOpacityEnabled();
    void setCascadeOpacityEnabled(bool cascadeOpacityEnabled);
    ccColor3B getColor(void);
    ccColor3B getDisplayedColor();
    void setColor(ccColor3B color);
    void updateDisplayedColor(ccColor3B parentColor);
    bool isCascadeColorEnabled();
    void setCascadeColorEnabled(bool cascadeColorEnabled);

    void setFntFile(const char* fntFile);
    const char* getFntFile();
};

// end of GUI group
/// @}
/// @}
