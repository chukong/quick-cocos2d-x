/****************************************************************************
Copyright (c) 2010-2012 cocos2d-x.org
Copyright (c) 2008-2010 Ricardo Quesada

http://www.cocos2d-x.org

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
****************************************************************************/

/**
 * @addtogroup GUI
 * @{
 * @addtogroup label
 * @{
 */

/** @brief CCLabelTTF is a subclass of CCTextureNode that knows how to render text labels
 *
 * All features from CCTextureNode are valid in CCLabelTTF
 *
 * CCLabelTTF objects are slow. Consider using CCLabelAtlas or CCLabelBMFont instead.
 *
 * Custom ttf file can be put in assets/ or external storage that the Application can access.
 * @code
 * CCLabelTTF *label1 = CCLabelTTF::create("alignment left", "A Damn Mess", fontSize, blockSize,
 *                                          kCCTextAlignmentLeft, kCCVerticalTextAlignmentCenter);
 * CCLabelTTF *label2 = CCLabelTTF::create("alignment right", "/mnt/sdcard/Scissor Cuts.ttf", fontSize, blockSize,
 *                                          kCCTextAlignmentLeft, kCCVerticalTextAlignmentCenter);
 * @endcode
 *
 */
class CCLabelTTF : public CCSprite
{
    CCLabelTTF();
    ~CCLabelTTF();

    /** creates a CCLabel from a fontname, alignment, dimension in points and font size in points
     @since v2.0.1
     */
    static CCLabelTTF * create(const char *text, const char *fontName, float fontSize,
                               CCSize dimensions, CCTextAlignment hAlignment,
                               CCVerticalTextAlignment vAlignment);

    /** creates a CCLabelTTF from a fontname, horizontal alignment, dimension in points,  and font size in points.
     @since v2.0.1
     */
    static CCLabelTTF * create(const char *text, const char *fontName, float fontSize,
                               CCSize dimensions, CCTextAlignment hAlignment);

    /** creates a CCLabelTTF with a font name and font size in points
     @since v2.0.1
     */
    static CCLabelTTF * create(const char *text, const char *fontName, float fontSize);

    /** Creates an label.
     */
    static CCLabelTTF * create();

    /** initializes the CCLabelTTF with a font name, alignment, dimension and font size */
    bool initWithString(const char *text, const char *fontName, float fontSize,
                        const CCSize& dimensions, CCTextAlignment hAlignment,
                        CCVerticalTextAlignment vAlignment);

    /** initializes the CCLabelTTF with a font name, alignment, dimension and font size */
    bool initWithString(const char *text, const char *fontName, float fontSize,
                        const CCSize& dimensions, CCTextAlignment hAlignment);

    /** initializes the CCLabelTTF with a font name and font size */
    bool initWithString(const char *text, const char *fontName, float fontSize);

    /** initializes the CCLabelTTF with a font name, alignment, dimension and font size */
    bool initWithStringAndTextDefinition(const char *text, ccFontDefinition &textDefinition);

    /** initializes the CCLabelTTF */
    bool init();

    /** set the text definition used by this label */
    void setTextDefinition(ccFontDefinition *theDefinition);

    /** get the text definition used by this label */
    ccFontDefinition * getTextDefinition();

    /** enable or disable shadow for the label */
    void enableShadow(CCSize shadowOffset, float shadowOpacity, float shadowBlur, bool mustUpdateTexture = true);

    /** disable shadow rendering */
    void disableShadow(bool mustUpdateTexture = true);

    /** enable or disable stroke */
    void enableStroke(ccColor3B strokeColor, float strokeSize, bool mustUpdateTexture = true);

    /** disable stroke */
    void disableStroke(bool mustUpdateTexture = true);

    /** set text tinting */
    void setFontFillColor(ccColor3B tintColor, bool mustUpdateTexture = true);

    /** changes the string to render
    * @warning Changing the string is as expensive as creating a new CCLabelTTF. To obtain better performance use CCLabelAtlas
    */
    void setString(const char *label);
    const char* getString(void);

    int getHorizontalAlignment();
    void setHorizontalAlignment(CCTextAlignment alignment);

    int getVerticalAlignment();
    void setVerticalAlignment(CCVerticalTextAlignment verticalAlignment);

    CCSize getDimensions();
    void setDimensions(CCSize dim);

    float getFontSize();
    void setFontSize(float fontSize);

    const char* getFontName();
    void setFontName(const char *fontName);
};

// end of GUI group
/// @}
/// @}
