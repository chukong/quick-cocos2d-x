
typedef enum
{
    // The entire application is visible in the specified area without trying to preserve the original aspect ratio.
    // Distortion can occur, and the application may appear stretched or compressed.
    kResolutionExactFit,
    // The entire application fills the specified area, without distortion but possibly with some cropping,
    // while maintaining the original aspect ratio of the application.
    kResolutionNoBorder,
    // The entire application is visible in the specified area without distortion while maintaining the original
    // aspect ratio of the application. Borders can appear on two sides of the application.
    kResolutionShowAll,
    // The application takes the height of the design resolution size and modifies the width of the internal
    // canvas so that it fits the aspect ratio of the device
    // no distortion will occur however you must make sure your application works on different
    // aspect ratios
    kResolutionFixedHeight,
    // The application takes the width of the design resolution size and modifies the height of the internal
    // canvas so that it fits the aspect ratio of the device
    // no distortion will occur however you must make sure your application works on different
    // aspect ratios
    kResolutionFixedWidth,

    kResolutionUnKnown,
} ResolutionPolicy;

/**
 * @addtogroup platform
 * @{
 */

class CCEGLView
{
    static CCEGLView* sharedOpenGLView(void);

    /**
     * Get the frame size of EGL view.
     * In general, it returns the screen size since the EGL view is a fullscreen view.
     */
    CCSize getFrameSize();

    /**
     * Set the frame size of EGL view.
     */
    void setFrameSize(float width, float height);

    /**
     * Get the visible area size of opengl viewport.
     */
    CCSize getVisibleSize();

    /**
     * Get the visible origin point of opengl viewport.
     */
    CCPoint getVisibleOrigin();

    /**
     * Set the design resolution size.
     * @param width Design resolution width.
     * @param height Design resolution height.
     * @param resolutionPolicy The resolution policy desired, you may choose:
     * [1] kResolutionExactFit Fill screen by stretch-to-fit: if the design resolution ratio of width to height is different from the screen resolution ratio, your game view will be stretched.
     * [2] kResolutionNoBorder Full screen without black border: if the design resolution ratio of width to height is different from the screen resolution ratio, two areas of your game view will be cut.
     * [3] kResolutionShowAll  Full screen with black border: if the design resolution ratio of width to height is different from the screen resolution ratio, two black borders will be shown.
     */
    void setDesignResolutionSize(float width, float height, ResolutionPolicy resolutionPolicy);

    /** Get design resolution size.
     *  Default resolution size is the same as 'getFrameSize'.
     */
    CCSize getDesignResolutionSize();

    /**
     * Set opengl view port rectangle with points.
     */
    void setViewPortInPoints(float x , float y , float w , float h);

    /**
     * Set Scissor rectangle with points.
     */
    void setScissorInPoints(float x , float y , float w , float h);

    /**
     * Get whether GL_SCISSOR_TEST is enable
     */
    bool isScissorEnabled();

    /**
     * Get the current scissor rectangle
     */
    CCRect getScissorRect();

    /**
     * Get the opengl view port rectangle.
     */
    CCRect getViewPortRect();

    /**
     * Get scale factor of the horizontal direction.
     */
    float getScaleX();

    /**
     * Get scale factor of the vertical direction.
     */
    float getScaleY();
};

// end of platform group
/// @}
