typedef enum
{
    LISTVIEWEX_ONSELECTEDITEM
}ListViewExEventType;

typedef enum
{
    LISTVIEW_GRAVITY_LEFT,
    LISTVIEW_GRAVITY_RIGHT,
    LISTVIEW_GRAVITY_CENTER_HORIZONTAL,
    
    LISTVIEW_GRAVITY_TOP,
    LISTVIEW_GRAVITY_BOTTOM,
    LISTVIEW_GRAVITY_CENTER_VERTICAL,
}ListViewGravity;

class UIListViewEx : public UIScrollView
{
    
public:

    /**
     * Default constructor
     */
    UIListViewEx();
    
    /**
     * Default destructor
     */
    virtual ~UIListViewEx();
    
    /**
     * Allocates and initializes.
     */
    static UIListViewEx* create();

    /**
     * Sets a item model for listview
     *
     * A model will be cloned for adding default item.
     *
     * @param model  item model for listview
     */
    void setItemModel(UIWidget* model);

    /**
     * Push back a default item(create by a cloned model) into listview.
     */
    void pushBackDefaultItem();
    
    /**
     * Insert a default item(create by a cloned model) into listview.
     */
    void insertDefaultItem(int index);
    
    /**
     * Push back custom item into listview.
     */
    void pushBackCustomItem(UIWidget* item);
    
    /**
     * Insert custom item into listview.
     */
    void insertCustomItem(UIWidget* item, int index);
    
    /**
     *  Removes the last item of listview.
     */
    void removeLastItem();
    
    /**
     * Removes a item whose index is same as the parameter.
     *
     * @param index of item.
     */
    void removeItem(int index);
    
    /**
     * Returns a item whose index is same as the parameter.
     *
     * @param index of item.
     *
     * @return the item widget.
     */
    UIWidget* getItem(unsigned int index);
    
    /**
     * Returns the item container.
     */
    CCArray* getItems();
    
    /**
     * Returns the index of item.
     *
     * @param item  the item which need to be checked.
     *
     * @return the index of item.
     */
    unsigned int getIndex(UIWidget* item) const;
    
    /**
     * Changes the gravity of listview.
     * @see ListViewGravity
     */
    void setGravity(ListViewGravity gravity);
    
    /**
     * Changes the margin between each item.
     *
     * @param margin
     */
    void setItemsMargin(float margin);
    
    /**
     * Refresh the view of list.
     *
     * If you change the data, you need to call this mathod.
     */
    void refreshView();
    
    int getCurSelectedIndex() const;

    /**
     * Changes scroll direction of scrollview.
     *
     * @see SCROLLVIEW_DIR      SCROLLVIEW_DIR_VERTICAL means vertical scroll, SCROLLVIEW_DIR_HORIZONTAL means horizontal scroll
     *
     * @param SCROLLVIEW_DIR
     */
    virtual void setDirection(SCROLLVIEW_DIR dir);
    
    virtual const char* getDescription() const;
};
