/**
 *  @js NA
 *  @lua NA
 */
class UILayer : public CCLayer
{
    
public:
    /**
     * Default constructor
     */
    UILayer();
    
    /**
     * Default destructor
     */
    virtual ~UILayer();
    
    /**
     * Allocates and initializes a widget.
     */
    static UILayer *create(void);
    
    //initializes state of uilayer.
    virtual bool init();
    
    virtual void onEnter();
    virtual void onExit();
    virtual void onEnterTransitionDidFinish();
    
    virtual int ccTouchBegan(CCTouch *pTouch, CCEvent *pEvent);
    virtual int ccTouchMoved(CCTouch *pTouch, CCEvent *pEvent);
    virtual void ccTouchEnded(CCTouch *pTouch, CCEvent *pEvent);
    virtual void ccTouchCancelled(CCTouch *pTouch, CCEvent *pEvent);
    
    /**
     * Add a widget to UILayer, for drawing.
     *
     * @param widget.
     */
    void addWidget(UIWidget* widget);
    
    /**
     * Remove a widget from UILayer.
     *
     * @param widget.
     *
     * @param cleanup true if all running actions on all children widgets should be cleanup, false otherwise.
     */
    void removeWidget(UIWidget* widget);
    
    /**
     * Sets whether the UILayer is visible
     *
     * The default value is true, a UILayer is default to visible
     *
     * @param visible   true if the UILayer is visible, false if the UILayer is hidden.
     */
    virtual void setVisible(bool visible);
    
    /**
     * Finds a widget whose tag is equal tag param from widget tree.
     *
     * @param tag.
     */
    UIWidget* getWidgetByTag(int tag);
    
    /**
     * Seek a widget whose name is equal name param from widget tree.
     *
     * @param name.
     */
    UIWidget* getWidgetByName(const char* name);
    
    /**
     * Gets UIInputManager.
     *
     * UIInputManager is the touch manager of UILayer.
     *
     * @return UIInputManager.
     */
    UIInputManager* getInputManager();
    
    /**
     * Remove and clean up all of UILayer's widget.
     */
    virtual void clear();
    
    /**
     * Gets root widget of UILayer.
     *
     * @return UIRootWidget, "UIRootWidget" is the root widget of UILayer.
     */
    UIRootWidget* getRootWidget();
};