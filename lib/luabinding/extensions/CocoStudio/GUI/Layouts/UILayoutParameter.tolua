typedef enum
{
    LAYOUT_PARAMETER_NONE,
    LAYOUT_PARAMETER_LINEAR,
    LAYOUT_PARAMETER_RELATIVE
}LayoutParameterType;
/**
*   @js NA
*   @lua NA
*/
class UILayoutParameter : public CCObject
{
public:
    /**
     * Default constructor
     */
    UILayoutParameter();
    
    /**
     * Default destructor
     */
    virtual ~UILayoutParameter();
    
    /**
     * Allocates and initializes.
     * @return A initialized LayoutParameter which is marked as "autorelease".
     */
    static UILayoutParameter* create();
    
    /**
     * Sets Margin parameter for LayoutParameter.
     * 
     * @see UIMargin
     *
     * @param margin
     */
    void setMargin(const UIMargin& margin);
    
    /**
     * Gets Margin parameter of LayoutParameter.
     *
     * @see UIMargin
     *
     * @return const UIMargin&
     */
    const UIMargin& getMargin() const;
    
    /**
     * Gets LayoutParameterType of LayoutParameter.
     *
     * @see LayoutParameterType
     *
     * @return LayoutParameterType
     */
    LayoutParameterType getLayoutType() const;
};
/**
*   @js NA
*   @lua NA
*/
class UILinearLayoutParameter : public UILayoutParameter
{
public:
    /**
     * Default constructor
     */
    UILinearLayoutParameter();
    
    /**
     * Default destructor
     */
    virtual ~UILinearLayoutParameter();
    
    /**
     * Allocates and initializes.
     * @return A initialized LayoutParameter which is marked as "autorelease".
     */
    static UILinearLayoutParameter* create();
    
    /**
     * Sets UILinearGravity parameter for LayoutParameter.
     *
     * @see UILinearGravity
     *
     * @param UILinearGravity
     */
    void setGravity(UILinearGravity gravity);
    
    /**
     * Gets UILinearGravity parameter for LayoutParameter.
     *
     * @see UILinearGravity
     *
     * @return UILinearGravity
     */
    UILinearGravity getGravity() const;
};
/**
*   @js NA
*   @lua NA
*/

class UILayout;

class UIRelativeLayoutParameter : public UILayoutParameter
{
public:
    /**
     * Default constructor
     */
    UIRelativeLayoutParameter();
    
    /**
     * Default destructor
     */
    virtual ~UIRelativeLayoutParameter();
    
    /**
     * Allocates and initializes.
     * @return A initialized LayoutParameter which is marked as "autorelease".
     */
    static UIRelativeLayoutParameter* create();
    
    /**
     * Sets UIRelativeAlign parameter for LayoutParameter.
     *
     * @see UIRelativeAlign
     *
     * @param UIRelativeAlign
     */
    void setAlign(UIRelativeAlign align);
    
    /**
     * Gets UIRelativeAlign parameter for LayoutParameter.
     *
     * @see UIRelativeAlign
     *
     * @return UIRelativeAlign
     */
    UIRelativeAlign getAlign() const;
    
    /**
     * Sets a key for LayoutParameter. Witch widget named this is relative to.
     *
     * @param name
     */
    void setRelativeToWidgetName(const char* name);
    
    /**
     * Gets the key of LayoutParameter. Witch widget named this is relative to.
     *
     * @return name
     */
    const char* getRelativeToWidgetName() const;
    
    /**
     * Sets a name in Relative Layout for LayoutParameter.
     *
     * @param name
     */
    void setRelativeName(const char* name);
    
    /**
     * Gets a name in Relative Layout of LayoutParameter.
     *
     * @return name
     */
    const char* getRelativeName() const;
};
